var _st =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _analytics = __webpack_require__(1);

var _analytics2 = _interopRequireDefault(_analytics);

var _request = __webpack_require__(2);

var _request2 = _interopRequireDefault(_request);

var _form = __webpack_require__(3);

var _form2 = _interopRequireDefault(_form);

var _modal = __webpack_require__(4);

var _modal2 = _interopRequireDefault(_modal);

var _cart = __webpack_require__(5);

var _cart2 = _interopRequireDefault(_cart);

var _checkout = __webpack_require__(6);

var _checkout2 = _interopRequireDefault(_checkout);

var _mu = __webpack_require__(7);

var _mu2 = _interopRequireDefault(_mu);

var _functions = __webpack_require__(8);

__webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	analytics: _analytics2.default,
	parseParams: _functions.parseParams,
	request: _request2.default,
	menu: _functions.menu,
	checkout: _checkout2.default,
	closer: _functions.closer,
	form: _form2.default,
	login: _functions.login,
	modal: _modal2.default,
	cart: _cart2.default,
	mu: _mu2.default,
	scroll: _functions.scroll
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var analytics = function analytics(obj) {
  if (typeof obj === 'undefined') {
    return false;
  }

  var page = obj.page || false,
      pageview = obj.pageview || false,
      event = obj.event || false,
      action = obj.action || obj.data;
  data = obj.data || false;

  if (typeof action === 'string' && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
    //console.log( "ga( "+obj.type+", "+action+", "+data+" )" )
    ga(obj.type, action, data);
  } else if (typeof obj.type !== 'undefined') {
    //console.log( "ga( "+obj.type+", "+action+" )" )
    ga(obj.type, action);
  }

  if (event) {
    //console.log( "ga( 'send', 'event', "+event+" )" )
    ga('send', 'event', event.name);
  }

  return pageview ? page ? ga('send', 'pageview', page) : ga('send', 'pageview') : pageview;
};

exports.default = analytics;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var request = function request(obj) {
  var ajaxp = {
    url: obj.route || '',
    method: obj.method || 'GET',
    headers: obj.headers || {},
    processData: false,
    dataType: obj.dataType || 'json',
    success: function success(data) {
      typeof obj.success !== 'undefined' && obj.success(data);
    },
    error: function error(x, s, r) {
      typeof obj.error !== 'undefined' && obj.error([x, s, r]);
    }
  };
  if (ajaxp.method !== 'GET') {
    ajaxp['data'] = JSON.stringify(obj.cdata || {});
  }
  if (typeof obj.accepts !== 'undefined') {
    ajaxp['accepts'] = obj.accepts;
  }
  $.ajax(ajaxp);
};

exports.default = request;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var form = {
  valid: false,
  disableForm: function disableForm(c) {
    $('.signup-submit', c).prop('disabled', !this.valid);
  },
  validate: function validate(con) {
    var inputs = $('input,select', con);
    inputs.each(function (k, v) {
      if ($(this).is(':required') && ($(this).val() && !$(this).hasClass('invalid') || $(this).hasClass('valid'))) {
        _st.form.valid = true;
      } else {
        _st.form.valid = false;
        _st.form.disableForm(con);
        return false;
      }
    });
    this.disableForm(con);
  }
};

exports.default = form;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var modal = function () {
  $('.loading-spinner').each(function (i) {
    $(this).attr('src', stajax.contentURL + '/i/sttv-spinner.gif');
  });
  return {
    action: '',
    element: $('#sttvmodal'),
    inner: $('.sttvmodal_inner'),
    init: function init(act) {
      if (typeof act === 'undefined') {
        return false;
      }
      if (this.action === act) {
        return this.toggle();
      }

      var cb;
      if (act !== 'close') {
        this.action = act;
        _st.modal.loader(function () {
          _st.modal.inner.empty();
        });
      }

      switch (act) {
        case 'close':
          break;
        case 'login':
          cb = function cb(el) {
            _st.login(el);
          };
          break;
        case 'account':
          cb = function cb(el) {};
          break;
        case 'mu-checkout':
          cb = function cb(el) {
            _st.mu.submit(el, '#mu_form_wrapper');
          };
          break;
        case 'mu-signup':
          cb = function cb(el) {
            _st.mu.register(el, '#mu_form_wrapper');
          };
          break;
        case 'sttv-cart':
        case 'checkout':
          cb = function cb(el) {
            _st.cart.submit(true, el);
          };
          break;
      }
      this.toggle(cb);
    },
    toggle: function toggle(cb) {
      $('body').toggleClass('modal-open');
      typeof cb === 'function' && cb(_st.modal.inner);
    },
    loader: function loader(cb) {
      _st.modal.element.toggleClass('loader-active');
      typeof cb === 'function' && cb(_st.modal.inner);
    }
  };
}();

exports.default = modal;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var cart = function () {
  if (stajax.type === 'courses') {
    return false;
  }
  var cartObj = JSON.parse(localStorage.getItem('_stcart_'));
  var initDate = Date.now();
  if (cartObj === null || (cartObj.ID / 1000 | 0) + 86400 < initDate / 1000 | 0) {
    cartObj = {
      ID: initDate,
      signature: btoa(navigator.userAgent + '|' + navigator.platform + '|' + navigator.product).replace(/=/g, ''),
      items: {}
    };
  }

  for (var key in cartObj.items) {
    var obj = cartObj.items[key];
    if (obj.type === 'multi-user') {
      delete cartObj.items[key];
    }
  }

  var currentCount = Object.keys(cartObj.items).length;

  var fabWrap = $('<div/>', { id: 'cart-FAB' }),
      fab = $('<a/>', { "class": 'cart-fab btn-floating btn-large z-depth-5' }),
      fabCon = $('<i/>', { "class": 'material-icons', text: 'shopping_cart' }),
      fabAlert = $('<div/>', { "class": 'cart-alert circle z-depth-2' });

  $('body').addClass('sttv-jscart');

  fabWrap.append(fabAlert.text(currentCount)).append(fab.append(fabCon)).appendTo(document.body);

  if (currentCount > 0) {
    fabAlert.addClass('show').siblings('.cart-fab').addClass('pulse');
  }

  localStorage.setItem('_stcart_', JSON.stringify(cartObj));

  return {
    cartObj: cartObj,
    changed: [],
    add: function add(item, skipUpdate) {
      skipUpdate = skipUpdate || false;
      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') {
        throw 'Item must be an object';
      }
      var cart = this.cartObj.items,
          msg = '';

      if (typeof cart[item.id] === 'undefined') {
        cart[item.id] = item;
        msg = 'Item added';
      } else {
        if (item.type !== 'subscription') {
          cart[item.id].qty += item.qty;
          msg = 'Quantity updated';
        }
      }

      this.changed.push(item.id);
      this.save(skipUpdate);

      _st.analytics({
        type: 'ec:addProduct',
        data: {
          'id': item.id,
          'name': item.name,
          'brand': 'SupertutorTV',
          'category': item.type,
          'quantity': item.qty,
          'price': (item.price / 100).toFixed(2)
        }
      });
      _st.analytics({
        type: 'ec:setAction',
        action: 'add'
      });
      return msg;
    },
    remove: function remove(item, skipUpdate) {
      skipUpdate = skipUpdate || false;
      if (typeof item !== 'string') {
        return false;
      }
      delete this.cartObj.items[item];
      return this.save(skipUpdate);
    },
    empty: function empty(cb) {
      this.cartObj.items = {};
      this.save();
      return typeof cb === 'function' && cb(this);
    },
    unset: function unset(cb) {
      localStorage.removeItem('_stcart_');
      return typeof cb === 'function' && cb(this);
    },
    save: function save(skip) {
      localStorage.setItem('_stcart_', JSON.stringify(this.cartObj));
      return !skip && this.notifications.update();
    },
    get: function get() {
      return this.cartObj.items;
    },
    notifications: {
      count: currentCount,
      element: fabAlert,
      update: function update() {
        this.count = Object.keys(_st.cart.cartObj.items).length;
        if (this.count <= 0) {
          $('.cart-alert').removeClass('show').siblings('.cart-fab').removeClass('pulse');
        } else {
          $('.cart-alert').addClass('show').siblings('.cart-fab').addClass('pulse');
        }
        $('.cart-alert').text(this.count);
        return this.count;
      }
    },
    submit: function submit(init, el) {
      var data = {
        init: init || false,
        cart: this.get()
      };

      _st.analytics({
        type: 'ec:setAction',
        action: 'click',
        pageview: true
      });

      _st.request({
        route: stajax.rest.url + '/checkout',
        method: 'POST',
        cdata: data,
        headers: {
          //'X-WP-Nonce' : stajax.rest.nonce,
        },
        success: function success(d) {
          _st.checkout = 'subscription';
          el.append(d.html);
          _st.modal.loader();

          for (var itemID in data.cart) {
            var item = data.cart[itemID];
            _st.analytics({
              type: 'ec:addProduct',
              data: {
                'id': item.id,
                'name': item.name,
                'brand': 'SupertutorTV',
                'category': item.type,
                'quantity': item.qty,
                'price': (item.price / 100).toFixed(2)
              }
            });
          }
          _st.analytics({
            type: 'ec:setAction',
            action: 'checkout',
            data: {
              'step': 1
            },
            pageview: true,
            page: '/checkout'
          });
        },
        error: function error(x) {
          console.log(x);
          var d = x[0].responseJSON;

          //$('.message',el).text(d.message)
          _st.modal.toggle(function () {
            _st.modal.loader();
          });
        }
      });
    }
  };
}();

exports.default = cart;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* Let's define the checkout object with methods and properties */
var checkout = function checkout() {
	var _totals;

	this.state = {
		type: '',
		valid: false,
		items: _st.cart.get(),
		totals: (_totals = {
			total: 0,
			tax: {
				amt: 0,
				msg: '',
				rate: 0
			},
			taxable: 0,
			shipping: 0,
			disc: 0,
			discp: 0
		}, _defineProperty(_totals, 'shipping', 0), _defineProperty(_totals, 'msg', ''), _defineProperty(_totals, 'coupon', ''), _totals),
		customer: {}
	};
};

checkout.prototype = {
	pricer: function pricer(price) {
		return (Math.round(price) / 100).toFixed(2);
	},
	update: function update(obj) {
		if (obj !== null) {
			$.extend(this.totals, obj);
		}

		if (this.state === this.totals) {
			console.log('state unchanged');
			return false;
		}
		var items = this.items,
		    keys = Object.keys(items),
		    tot = this.totals;

		$('.items-row').fadeOut(100, function () {
			$(this).empty();

			for (var i = 0; i < keys.length; i++) {
				if (i === 0) {
					tot.total = tot.taxable = tot.tax.amt = 0;
				}

				var item = items[keys[i]],
				    price = item.price * item.qty;

				if (item.taxable !== false) {
					tot.taxable += item.taxableAmt;
				}

				tot.total += price;

				$(this).append('<div class="row"><div class="col s2">' + item.qty + '</div><div class="col s8">' + item.name + '</div><div class="col s2 right-align">' + _st.checkout.pricer(price) + '</div></div>');
			}

			if (0 < tot.disc) {
				var discprice = tot.disc;
			} else if (0 < tot.discp) {
				var discprice = tot.total * (tot.discp / 100);
			}

			if (0 < tot.disc || 0 < tot.discp) {
				tot.total -= discprice;
				$(this).append('<div class="row"><div class="col s2"></div><div class="col s8">Discount (' + tot.coupon + ')</div><div class="col s2 right-align">-' + _st.checkout.pricer(discprice) + '</div></div>');
			}

			if (tot.tax.rate > 0) {
				tot.tax.amt = tot.taxable * tot.tax.rate / 100;
				tot.total += tot.tax.amt;
				$(this).append('<div class="row"><div class="col s2"></div><div class="col s8">' + tot.tax.msg + '</div><div class="col s2 right-align">+' + _st.checkout.pricer(tot.tax.amt) + '</div></div>');
			}

			if (tot.shipping > 0) {
				tot.total += tot.shipping;
				$(this).append('<div class="row"><div class="col s2"></div><div class="col s8">Priority Shipping</div><div class="col s2 right-align">+' + _st.checkout.pricer(tot.shipping) + '</div></div>');
			}

			$('#ttltxt>span').text(_st.checkout.pricer(tot.total));
		}).fadeIn(100);

		this.state = $.extend(true, {}, this.totals);
	},
	setOutcome: function setOutcome(result, con) {
		if (typeof result.error !== 'undefined') {
			$('.error', con).text(result.error.message);
		} else {
			$('.error', con).text('');
		}

		var inputs = $('input, select', con);
		_st.checkout.validate(inputs, con, result.complete);
	},
	setup: function setup() {
		var stripe = Stripe(stajax.stripe.public_key);
		var elements = stripe.elements();
		var card = elements.create('card', {
			hidePostalCode: true
		});
		card.mount('#sttv_card_element');

		card.on('change', function (event) {
			this.setOutcome(event, '#checkout-wrapper');
		});

		M.updateTextFields();
		$('select').formSelect();
		this.update();
	},
	submit: function submit(data) {
		_st.modal.loader(function () {
			var mo = $('#modal_loading_overlay');

			mo.find('*').not('img').remove();

			mo.append('<h2 style="margin-top:4em">Authorizing card...</h2>').append('<span>(Patience, young padawan... This will take a moment.)</span>');
		});
		var det = {
			name: data.cardname,
			address_line1: data.billing_address1,
			address_line2: data.billing_address2,
			address_city: data.billing_city,
			address_state: data.billing_state,
			address_zip: data.billing_pcode,
			address_country: data.billing_country
		};

		stripe.createToken(card, det).then(function (result) {
			if (result.error) {
				console.log(result.error);
				return _st.modal.loader(function (el) {
					$('.error', el).text(result.error.message);
				});
			} else {
				$('#modal_loading_overlay h2').text('Processing order...');
				data.token = result.token;
				data.cart = _st.cart.cartObj;

				_st.request({
					route: stajax.rest.url + '/checkout',
					method: 'POST',
					cdata: data,
					headers: {
						'X-WP-Nonce': stajax.rest.nonce
					},
					success: function success(d) {
						console.log(d);

						if ('error' === d.code) {
							var ecode = d.error.decline_code || d.error.code;
							_st.modal.loader(function (el) {
								$('p.error', el).html('<span class="col s12">We\'re sorry. ' + d.error.message + '</span><span class="col s12">err code: ' + ecode + '</span>');
							});
						} else if ('success' === d.code) {
							var success = $('<div/>', {
								id: 'success',
								'class': 'col s12'
							}).append('<h2><i class="material-icons">done</i></h2><br/><span>' + d.message + '</span>');

							$('#modal_loading_overlay').empty().append(success);

							var lines = d.order.invoice.data[0].lines.data,
							    tax = shipping = '0',
							    coupon = d.order.invoice.data[0].discount || '';

							for (var i = 0, len = lines.length; i < len; i++) {
								var line = lines[i];

								if (line.description === 'Sales tax') {
									tax = (line.amount / 100).toFixed(2);
								} else if (line.description === 'Priority Shipping') {
									shipping = (line.amount / 100).toFixed(2);
								}
							}

							_st.analytics({
								type: 'ec:setAction',
								action: 'purchase',
								data: {
									'id': d.cart.ID,
									'revenue': (d.order.invoice.data[0].amount_paid / 100).toFixed(2),
									'tax': tax,
									'shipping': shipping,
									'coupon': coupon,
									'affiliation': 'SupertutorTV Online Store'
								},
								pageview: true,
								page: '/checkout'
							});

							_st.cart.unset();

							setTimeout(function () {
								window.location.href = d.order.redirect;
							}, 3000);
						}
					},
					error: function error(x) {
						var d = x[0].responseJSON;
						console.log(x, d);
					}
				});
			}
		});
	},
	validate: function validate(inputs, context, extra) {
		if (typeof extra === 'undefined') {
			extra = true;
		}

		var cEr = true;

		inputs.each(function (k, v) {
			var t = $(this),
			    msgTag = '';

			if (t.is(':required') && (!t.val() || t.hasClass('invalid'))) {
				var msgTag = !t.val() ? ' is required' : ' is invalid';
				cEr = false;
				$('.error', context).html($(v).siblings('label').text() + msgTag);
			} else if (t.hasClass('invalid')) {
				cEr = false;
				$('.error', context).html($(v).siblings('label').text() + ' is invalid');
			}

			if (!cEr) {
				return cEr;
			}
		});

		$('.signup-submit', context).prop('disabled', !(cEr && extra));

		return cEr && extra;
	}
};

exports.default = checkout;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var mu = {
  submit: function submit(el, con) {
    var data = {
      mukey: $('input[name=mukey]', con).val(),
      email: $('input[name=email]', con).val(),
      license: {
        id: $('select[name=sttv_course_id]', con).val(),
        title: $('select[name=sttv_course_id] option:selected', con).text(),
        qty: $('select[name=qty]', con).val()
      }
    },
        type = 'multi-user';

    _st.request({
      route: stajax.rest.url + '/multi-user',
      method: 'POST',
      cdata: data,
      headers: {
        'X-WP-Nonce': stajax.rest.nonce
      },
      success: function success(d) {
        _st.checkout = type;
        _st.cart.empty(function (t) {
          t.add(d.data, true);
        });
        el.append(d.html);
        _st.modal.loader();
        console.log(d);
      },
      error: function error(x) {
        var d = x[0].responseJSON;

        $('.message', con).text(d.message);
        _st.modal.toggle(function () {
          _st.modal.loader();
        });
        console.log(d);
      }
    });
  },
  register: function register(el, con) {

    var data = {
      muid: $('input[name=mukey]', con).val(),
      email: $('input[name=sttv_email]', con).val(),
      password: $('input[name=sttv_password]', con).val(),
      firstName: $('input[name=sttv_firstname]', con).val(),
      lastName: $('input[name=sttv_lastname]', con).val()
    };

    _st.request({
      route: stajax.rest.url + '/checkout',
      method: 'POST',
      cdata: data,
      headers: {
        'X-WP-Nonce': stajax.rest.nonce
      },
      success: function success(d) {
        el.append(d.html);
        _st.modal.loader();
        setTimeout(function () {
          window.location.href = d.data.redirect;
        }, 2000);
        console.log(d);
      },
      error: function error(x) {
        console.log(x);
        var d = x[0].responseJSON;

        $('.message', con).text(d.message);
        _st.modal.toggle(function () {
          _st.modal.loader();
        });
      }
    });
  }
};

exports.default = mu;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var parseParams = function parseParams(str, regex) {
  return (str || document.location.search).replace(/(^\?)/, '').replace(regex, '').split("&").map(function (n) {
    return n = n.split("="), this[n[0]] = n[1], this;
  }.bind({}))[0];
};

var menu = function menu(cb) {
  $('body').toggleClass('nav-sidebar-open');
  typeof cb === 'function' && cb();
};

var closer = function closer(cb) {
  jQuery('body').removeClass('nav-sidebar-open modal-open');
  typeof cb === 'function' && cb();
};

var login = function login(el) {
  _st.request({
    route: stajax.rest.url + '/auth',
    headers: {
      //'X-WP-Nonce' : stajax.rest.nonce,
    },
    success: function success(d) {
      el.append(d);
      _st.modal.loader();
    },
    error: function error(x) {
      console.log(x);
    }
  });
};

var scroll = function scroll(a) {
  $('html, body').stop().animate({
    scrollTop: $(a).offset().top - 100
  }, 1250, "swing");
};

exports.parseParams = parseParams;
exports.menu = menu;
exports.closer = closer;
exports.login = login;
exports.scroll = scroll;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(10);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 *
 * SITE EVENTS
 *
 */

// Opener functions
(0, _jquery2.default)('input, select', '#mu_form_wrapper').on('change', function (e) {
    _st.form.validate('#mu_form_wrapper');
    _st.modal.action = '';
});
// modal handler
var selectors = '.slide-bar, .modal-toggle, .mu-signup, .read-more, .mu-submitter, .cart-fab, .payment-launcher';
(0, _jquery2.default)(document).on('click', selectors, function (e) {
    e.preventDefault();
    var t = (0, _jquery2.default)(this),
        c = t.attr('class').split(/\s+/),
        tda = t.attr('data-action');

    var f = {
        'mu-signup': function muSignup() {
            _st.modal.init('mu-signup');
        },
        'payment-launcher': function paymentLauncher() {
            _st.modal.init('checkout');
        },
        'modal-toggle': function modalToggle() {
            if ('account' == tda) {
                // remove this for 2.0
                window.location.href = t.attr('href');
            } else {
                _st.modal.init(tda);
            }
        },
        'slide-bar': function slideBar() {
            _st.menu();
        },
        'read-more': function readMore() {
            t.parent().css({ 'display': 'none' });
            (0, _jquery2.default)('#content-wrapper').css({ 'max-height': 'none' });
        },
        'mu-submitter': function muSubmitter() {
            _st.modal.init('mu-checkout');
        },
        'cart-fab': function cartFab() {
            _st.modal.init('sttv-cart');
        }
    };

    c.some(function (v) {
        typeof f[v] !== 'undefined' && f[v]();
    });
});

// scroller
(0, _jquery2.default)(document).on('click', '.st-scroll', function (e) {
    e.preventDefault();
    _st.scroll(e.target.getAttribute('href'));
});

var thenav = (0, _jquery2.default)('body.nav-sidebar-open #main-nav');
thenav.on('click touchstart', function (e) {
    if (e.offsetX > thenav.offsetWidth) {
        alert('Clicked!');
        e.preventDefault();
        _st.closer();
    }
});

(0, _jquery2.default)('li.menu-item-has-children>a').click(function (e) {
    e.preventDefault();
    (0, _jquery2.default)(this).siblings('ul.sub-menu').toggleClass('active').promise().done(function () {
        (0, _jquery2.default)('ul.sub-menu').not(this).removeClass('active');
    });
});

(0, _jquery2.default)(document).on('submit', 'form#sttv_login_form', function (e) {
    e.preventDefault();
    if (0 === (0, _jquery2.default)('#sttv_user').val().length) {
        (0, _jquery2.default)('.message').html('Username is required');
        return;
    }

    var loader = '<img src="' + stajax.contentURL + '/i/sttv-spinner.gif" alt="Loading..." />',
        ld = (0, _jquery2.default)('.loading_overlay');
    ld.append(loader).promise().done(function () {
        (0, _jquery2.default)(this).fadeIn(250);
    });

    _st.request({
        route: stajax.rest.url + '/auth?action=login',
        method: 'POST',
        headers: {
            'X-WP-Nonce': stajax.rest.nonce,
            'X-STTV-Auth': btoa(this.sttv_user.value + ':' + this.sttv_pass.value)
        },
        success: function success(data) {
            if (data.code == 'login_success') {
                ld.empty().html('<p class="sblock"><strong><i class="material-icons">done</i></strong></p>').fadeIn(250);
                (0, _jquery2.default)('.sblock').hide().fadeIn(250);
                setTimeout(function () {
                    window.location.href = data.redirect;
                }, 250);
            }
        },
        error: function error(x) {
            var data = x[0].responseJSON,
                msg = typeof data.errors.too_many_retries !== 'undefined' ? data.errors.too_many_retries[0] : data.message;

            (0, _jquery2.default)('.message').html(msg);
            ld.fadeOut(250);
            console.log(data);
        }
    });
});

(0, _jquery2.default)('form#sttv_contact').on('submit', function (e) {
    e.preventDefault();
    var loading = (0, _jquery2.default)('.loading_overlay', (0, _jquery2.default)(this).parent()).html('<img src="' + stajax.contentURL + '/i/sttv-spinner.gif" alt="Loading..." />');

    loading.fadeIn(250);

    _st.request({
        route: stajax.rest.url + '/contact',
        method: 'POST',
        headers: {
            'X-WP-Nonce': stajax.rest.nonce
        },
        cdata: {
            g_recaptcha_response: grecaptcha.getResponse(),
            sttv_contact_name: this.sttv_contact_name.value,
            sttv_contact_email: this.sttv_contact_email.value,
            sttv_contact_subject: this.sttv_contact_subject.value,
            sttv_contact_message: this.sttv_contact_message.value
        },
        success: function success(data) {
            console.log(data);
            if (data.sent) {
                loading.empty().html('<p class="sblock"><strong><i class="material-icons">done</i></strong></p>').fadeIn(250);
                var s = (0, _jquery2.default)('.sblock');
                var p = (0, _jquery2.default)('<p/>', { "class": "smessage" });
                p.appendTo(s).append(data.message);
                (0, _jquery2.default)('.sblock').hide().fadeIn(250);
            } else {
                (0, _jquery2.default)('.message').html(data.message);
                loading.fadeOut(250);
            }
        },
        error: function error(x) {
            (0, _jquery2.default)('.message').html('Something went wrong. Please refresh the page and try again.');
            loading.fadeOut(250);
            console.log(x);
        }
    });
});

(0, _jquery2.default)('#subscribe_page_mc').on('submit', function (e) {
    e.preventDefault();
    var form = (0, _jquery2.default)(this);

    var loading = (0, _jquery2.default)('.loading_overlay', (0, _jquery2.default)(this).parent()).html('<img src="' + stajax.contentURL + '/i/sttv-spinner.gif" alt="Loading..." />');

    loading.fadeIn(250);

    var fields = {
        fname: (0, _jquery2.default)('#sttv_mc_fname', form).val(),
        lname: (0, _jquery2.default)('#sttv_mc_lname', form).val(),
        email: (0, _jquery2.default)('#sttv_mc_email', form).val(),
        g_recaptcha_response: grecaptcha.getResponse()
    };

    _st.request({
        route: stajax.rest.url + '/subscribe',
        method: 'POST',
        cdata: fields,
        headers: { 'X-WP-Nonce': stajax.rest.nonce },
        success: function success(d) {
            (0, _jquery2.default)('input, button', form).prop('disabled', true);
            grecaptcha.reset();
            loading.empty().html('<p class="sblock"><strong><i class="material-icons">done</i></strong></p>').fadeIn(250);
            var s = (0, _jquery2.default)('.sblock');
            var p = (0, _jquery2.default)('<p/>', { "class": "smessage" });
            p.appendTo(s).append(d.message);
            (0, _jquery2.default)('.sblock').hide().fadeIn(250);
            console.log(d);
        },
        error: function error(x) {
            (0, _jquery2.default)('.message', form).html('Something went wrong. Please refresh the page and try again.');
            loading.fadeOut(250);
            console.log(x);
        }
    });
});

(0, _jquery2.default)('#same_as_billing').on('change', function () {
    if ((0, _jquery2.default)(this).is(":checked")) {

        (0, _jquery2.default)('input[name=sttv_shipping_address1]').val((0, _jquery2.default)('input[name=sttv_billing_address1]').val());
        (0, _jquery2.default)('input[name=sttv_shipping_address2]').val((0, _jquery2.default)('input[name=sttv_billing_address2]').val());
        (0, _jquery2.default)('input[name=sttv_shipping_city]').val((0, _jquery2.default)('input[name=sttv_billing_city]').val());
        (0, _jquery2.default)('input[name=sttv_shipping_state]').val((0, _jquery2.default)('input[name=sttv_billing_state]').val());
        (0, _jquery2.default)('input[name=sttv_shipping_pcode]').val((0, _jquery2.default)('input[name=sttv_billing_pcode]').val());
        (0, _jquery2.default)('select[name=sttv_shipping_country]').val((0, _jquery2.default)('select[name=sttv_billing_country]').val());

        (0, _jquery2.default)('select').formSelect();
    } else {
        (0, _jquery2.default)("#shipping_fields :input").each(function () {
            (0, _jquery2.default)(this).val('');
        });
        (0, _jquery2.default)("select[name=sttv_shipping_country]").prop("selectedIndex", -1);
    }

    M.updateTextFields();
    (0, _jquery2.default)('input, select', '#shipping_fields').blur();
});

(0, _jquery2.default)('[name=shipping_options]').on({
    change: function change(e) {
        e.preventDefault();
        _st.checkout.update({
            shipping: parseInt((0, _jquery2.default)(this).filter(':checked').val())
        });
    }
});

(0, _jquery2.default)('[name=sttv_billing_pcode]').on({
    focusin: function focusin() {
        (0, _jquery2.default)(this).data('val', (0, _jquery2.default)(this).val());
    },
    change: function change(e) {
        e.preventDefault();
        var val = (0, _jquery2.default)(this).val();
        if ((0, _jquery2.default)(this).data('val') === val) {
            return false;
        } else if (!val) {
            return _st.checkout.update({
                tax: {
                    rate: 0
                }
            });
        }

        _st.request({
            route: stajax.rest.url + '/checkout?zip=' + val,
            headers: {
                'X-WP-Nonce': stajax.rest.nonce
            },
            success: function success(d) {
                _st.checkout.update({
                    tax: {
                        rate: d.tax,
                        msg: d.message
                    }
                });
            },
            error: function error(x) {
                console.log(x);
            }
        });
    }
});

(0, _jquery2.default)('[name=sttv_email],input[name=sttv_coupon]').on({
    focusout: function focusout(e) {
        if (!(0, _jquery2.default)(this).val()) {
            tThis.removeClass('valid invalid');
        }
    },
    change: function change(e) {
        e.preventDefault();
        var tThis = (0, _jquery2.default)(this),
            val = tThis.val(),
            qstring = '';

        switch (tThis.attr('name')) {
            case 'sttv_coupon':
                if (!val) {
                    _st.checkout.update({
                        disc: 0,
                        discp: 0
                    });
                    return false;
                }
                qstring = 'coupon=';
                break;
            case 'sttv_email':
                if (!val) {
                    return false;
                }
                qstring = 'email=';
                break;
            default:
                return false;
        }

        _st.request({
            route: stajax.rest.url + '/checkout?' + qstring + val,
            headers: {
                //'X-WP-Nonce' : stajax.rest.nonce,
            },
            success: function success(d) {
                tThis.removeClass('valid invalid');
                console.log(d);

                var msg = {},
                    cls = '';

                switch (d.code) {
                    case 'coupon_valid':
                    case 'email_available':
                        cls = 'valid';
                        msg = { 'data-success': d.message };
                        break;
                    case 'coupon_invalid':
                        cls = 'invalid';
                        msg = { 'data-error': d.error.message };
                        break;
                    case 'coupon_expired':
                    case 'email_taken':
                        cls = 'invalid';
                        msg = { 'data-error': d.message };
                        break;
                }

                tThis.addClass(cls).siblings('label').attr(msg);

                _st.checkout.update({
                    discp: d.percent_off,
                    disc: d.amount_off,
                    coupon: d.id
                });
            },
            error: function error(x) {
                console.log(x);
            }
        });
    }
});

(0, _jquery2.default)('.signup-submit').on('click', function (e) {
    e.preventDefault();
    var inputs = (0, _jquery2.default)('input, select', '#checkout-wrapper'),
        valid = _st.checkout.validate(inputs, '#checkout-wrapper');
    if (valid) {
        _st.checkout.submit(_st.parseParams(decodeURIComponent(inputs.serialize()), /sttv_/gi));
    }
});

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })
/******/ ]);